from custom import Target, parse, OS, HOME

# .Lib(parse("tcmalloc_minimal"))                              \

base = Target() \
    .Includes(parse(". /usr/local/include/freetype2 /usr/local/include /usr/include")) \
    .Libpath(parse(". /usr/local/lib /usr/lib"))                         \
    .Cxxflags(parse("-O3 -std=c++11"))                                                     \
    .Cflags(parse("-O3 -std=c11"))                                                         \
    .Subtarget("Darwin")                                                                   \
        .Cxxflags(parse("-mmacosx-version-min=10.8.1 -stdlib=libc++"))                     \
        .Frameworkpath(parse("/System/Library/Frameworks"))                                \
        .Pop()                                                                             \
    .Subtarget("Linux")                                                                    \
        .Cxxflags(parse("-fPIC"))                                                          \
        .Libpath(parse("/usr/lib/x86_64-linux-gnu"))                                       \
        .Pop()

# -D_GLIBCXX_USE_NANOSLEEP
# base.Cxxflags(parse("-O3 -std=c++11")).Cflags(parse("-O3 -std=c11"))
# base.Cxxflags(parse("-g -std=c++11")).Cflags(parse("-g -std=c11"))

def objTarget(name):
    return Target(base, name).Source([name]).Kind("object")

sources = parse('''
freetype.cc
glyph.cc
image.cc
''')

sources_obj = [objTarget(n) for n in sources]


################################################################################
# Program: polycover
################################################################################

tmfont = Target(base, "tmfont")    \
    .Kind("program")               \
    .Use(sources)                  \
    .Source( parse("tmfont.cc"))   \
    .Lib(parse("freeimage freetype"))

################################################################################
# targets
################################################################################

targets = [tmfont]

def build(bld):

    for obj in sources_obj:
        # print "------------------", obj.name
        # print "------------------", obj.Subtarget(OS).GetValue("cxxflags")
        bld.objects(
            target        = obj.name,
            source        = obj.Subtarget(OS).GetValue("source"),
            includes      = obj.Subtarget(OS).GetValue("includes"),
            cxxflags      = obj.Subtarget(OS).GetValue("cxxflags")
        )

    for target in targets:
        if target.kind == "program":
            bld.program(
                target        = target.name,
                vnum          = '0.1',
                install_path  = '${HOME}/local/bin'.replace("${HOME}",HOME),
                use           = target.Subtarget(OS).GetValue("use"),
                source        = target.Subtarget(OS).GetValue("source"),
                includes      = target.Subtarget(OS).GetValue("includes"),
                cxxflags      = target.Subtarget(OS).GetValue("cxxflags"),
                libpath       = target.Subtarget(OS).GetValue("libpath"),
                lib           = target.Subtarget(OS).GetValue("lib"),
                frameworkpath = target.Subtarget(OS).GetValue("frameworkpath"),
                framework     = target.Subtarget(OS).GetValue("framework")
            )
        elif target.kind == "shlib":
            bld.shlib(
                target        = target.name,
                # vnum          = '0.1',
                install_path  = '${HOME}/local/lib'.replace("${HOME}",HOME),
                use           = target.Subtarget(OS).GetValue("use"),
                source        = target.Subtarget(OS).GetValue("source"),
                includes      = target.Subtarget(OS).GetValue("includes"),
                cxxflags      = target.Subtarget(OS).GetValue("cxxflags"),
                libpath       = target.Subtarget(OS).GetValue("libpath"),
                lib           = target.Subtarget(OS).GetValue("lib"),
                frameworkpath = target.Subtarget(OS).GetValue("frameworkpath"),
                framework     = target.Subtarget(OS).GetValue("framework")
            )
